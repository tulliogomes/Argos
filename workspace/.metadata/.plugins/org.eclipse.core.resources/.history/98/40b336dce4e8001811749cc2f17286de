package br.edu.ifpb.argos.bean;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.persistence.PersistenceException;

import br.edu.ifpb.argos.entity.Crime;
import br.edu.ifpb.argos.facade.CrimeController;

@ManagedBean(name = "crimeBean")
@ViewScoped
public class CrimeBean extends GenericBean implements Serializable {
	private static final long serialVersionUID = 1L;
	
	private Crime crime;
	private Integer id = null;
	private String titulo;
	private String descricao;
	private Date data;

	public String salvar() {
		CrimeController controller = new CrimeController();
		String proxView = null;


		if (id != null) {
			Crime = controller.buscar(id);
			Crime.setNome(nome);
			Crime.setEmail(email);
			Crime.setFone(telefone);
			Crime.setPerfil(perfil);
			controller.atualizar(Crime);
			proxView = "Crimes?faces-redirect=true";
		} else {
			try {
				Crime = new Crime();
				Crime.setMatricula(matricula);
				Crime.setNome(nome);
				Crime.setEmail(email);
				Crime.setPerfil(perfil);
				Crime.setFone(telefone);
				Crime.setDataAniversario(nascimento);
				Crime.setSenha(senha);
				Crime.setStatus(true);
				controller.cadastrar(Crime);
				this.addSuccessMessage("Crime salvo com sucesso");
				proxView = "Crimes?faces-redirect=true";
				Crime = new Crime();
			} catch (PersistenceException e) {
				this.addErrorMessage("Erro ao tentar salvar o usuário.");
			}
		}
		return proxView;
	}

	public String mudarStatus(Crime Crime) {

		String proxView = null;
		try {
			CrimeController controller = new CrimeController();
			Crime = controller.buscar(Crime.getId());
			Crime.setStatus(!Crime.getStatus());
			controller.atualizar(Crime);
			this.addSuccessMessage("Crime atulizado com sucesso");
			proxView = "Crimes?faces-redirect=true";
			Crime = new Crime();
		} catch (PersistenceException e) {
			this.addErrorMessage("Erro ao tentar atualizar o usuário.");
		}
		return proxView;
	}

	public String editar(Crime Crime) {
		this.nome = Crime.getNome();
		this.email = Crime.getEmail();
		this.perfil = Crime.getPerfil();
		this.telefone = Crime.getFone();
		this.nascimento = Crime.getDataAniversario();
		this.id = Crime.getId();
		this.editando = true;
		return "cadastro?faces-redirect=true&includeViewParams=true";
	}

	public String excluir(Crime Crime) {
		String proxima_pagina = null;
		if (Crime.getStatus() == true) {
			this.addSuccessMessage("Usuário ativo não pode ser excluído");
			proxima_pagina = "Crimes?faces-redirect=true";
		} else {
			CrimeController controller = new CrimeController();
			controller.excluir(Crime);
			this.addSuccessMessage("Usuário excluído com sucesso");
			proxima_pagina = "Crimes?faces-redirect=true";
		}
		return proxima_pagina;
	}

	public String alterarSenha() {
		CrimeController controller = new CrimeController();
		loginBean.getCrimeLogado().setSenha(nova_senha);
		controller.atualizar(loginBean.getCrimeLogado());
		this.addSuccessMessage("Senha alterada com sucesso");
		return "/Crime/alterar_senha?faces-redirect=true";
	}

	public String pesquisarCrime() {
		CrimeController controller = new CrimeController();
		this.Crimes = controller.pesquisar(argumento);

		if (Crimes.isEmpty())
			this.addErrorMessage("Não há usuários para o argumento informado.");
		return "busca?faces-redirect=true&includeViewParams=true";
	}

	public String goCadastro() {
		return "/Crime/cadastro?faces-redirect=true";
	}

	public String goCrimes() {
		return "/Crime/Crimes?faces-redirect=true";
	}

	public void listarCrimesAtivos() {
		CrimeController controller = new CrimeController();
		this.Crimes = controller.listarCrimesAtivos();
	}

	public Crime getCrime() {
		return Crime;
	}

	public void setCrime(Crime Crime) {
		this.Crime = Crime;
	}

	public String getMatricula() {
		return matricula;
	}

	public void setMatricula(String matricula) {
		this.matricula = matricula;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getPerfil() {
		return perfil;
	}

	public void setPerfil(String perfil) {
		this.perfil = perfil;
	}

	public String getTelefone() {
		return telefone;
	}

	public void setTelefone(String telefone) {
		this.telefone = telefone;
	}

	public String getSenha() {
		return senha;
	}

	public void setSenha(String senha) {
		this.senha = senha;
	}

	public Date getDataaniversario() {
		return nascimento;
	}

	public void setDataaniversario(Date dataaniversario) {
		this.nascimento = dataaniversario;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public List<Crime> getCrimes() {
		return Crimes;
	}

	public void setCrimes(List<Crime> Crimes) {
		this.Crimes = Crimes;
	}

	public void listarCrimes() {
		CrimeController controller = new CrimeController();
		this.Crimes = controller.listar();
	}

	public Date getNascimento() {
		return nascimento;
	}

	public void setNascimento(Date nascimento) {
		this.nascimento = nascimento;
	}

	public String getConfirmacao() {
		return confirmacao;
	}

	public void setConfirmacao(String confirmacao) {
		this.confirmacao = confirmacao;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public boolean isEditando() {
		return editando;
	}

	public void setEditando(boolean editando) {
		this.editando = editando;
	}

	public String getNova_senha() {
		return nova_senha;
	}

	public void setNova_senha(String nova_senha) {
		this.nova_senha = nova_senha;
	}

	public LoginBean getLoginBean() {
		return loginBean;
	}

	public void setLoginBean(LoginBean loginBean) {
		this.loginBean = loginBean;
	}

	public String getArgumento() {
		return argumento;
	}

	public void setArgumento(String argumento) {
		this.argumento = argumento;
	}

}
